[branch]
    autosetuprebase = always
[help]
    autocorrect = 1
[color]
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red
    new = green
[diff]
    algorithm = patience
	submodule = log
[color "status"]
    added = bold green
    changed = bold red
    untracked = bold cyan
[alias]
    # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    snapshots = !git stash list --grep snapshot
    #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
    recent-branches = !git for-each-ref --count=5 --sort=-committerdate refs/heads/ --format='%(refname:short)'
    amend = commit --amend --reuse-message=HEAD   # amend your last commit

    # amend a specific commit. Example usage: "git add -p; git fixup HEAD~5" 
    # OR "git add -p; git stash --keep-index; git fixup HEAD~5; git stash pop"
    # via http://stackoverflow.com/questions/3103589/how-can-i-easily-fixup-a-past-commit
    fixup = "!sh -c '(git diff-files --quiet || (echo Unstaged changes, please commit or stash with --keep-index; exit 1)) && COMMIT=$(git rev-parse $1) && git commit --fixup=$COMMIT && git rebase -i --autosquash $COMMIT~1' -"
    cm = commit -m
    co = checkout
    syncup = !git stash clear && git stash && git checkout master && git fetch upstream && git rebase upstream/master && git stash apply
    syncma = !git stash clear && git stash && git pull --rebase origin master && git stash apply

    # pretty one-line log with tags, branches and authors
    ls = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --decorate --date=short
    # a verbose ls, shows changed files too
    lsv = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --decorate --date=short --numstat

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # some resets without explanation
    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard

    # basic shortcuts
    cp = cherry-pick
    s = status -s
    cl = clone
    ci = commit
    co = checkout
    br = branchÂ·
    diff = difftool -y -x "colordiff -y " | less -R
    d = diff
    dc = diff --cached
    ds = diff --staged

    # stash shortcuts
    sl = stash list
    sa = stash apply
    ss = stash save
    clone = clone --recursive

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Show latest commits since last pull from remote
    news = log -p HEAD@{1}..HEAD@{0}

    # Submodule related
    sdiff = !git diff && git submodule foreach 'git diff'
    spush = push --recurse-submodules=on-demand
    supdateall = submodule foreach git pull

    # Prune all stale remote branches
    prune-all = !git remote | xargs -n 1 git remote prune

    # Untrack a file
    untrack = rm --cache --
[push]
    default = current
[include]
    path = .gitconfig.user
[core]
    excludesfile = ~/.gitignore_global
    editor = vim
    autocrlf = input

# QuickNote: To modify an old commit
# You can use git rebase
# for example, if you want to modify back to commit bbc643cd, run
#
# $ git rebase --interactive bbc643cd^
#
# In the default editor, modify 'pick' to 'edit' in the line whose commit you want to modify.
# Make your changes and then stage them with
#
# $ git add <filepattern>
#
# Now you can use
#
# $ git commit --amend
#
# to modify the commit, and after that
#
# $ git rebase --continue
#
# to return back to the previous head commit.
#
################################################
#
# QuickNote2: To cherry-pick a commit to a new branch for a separate pull request
#
# Create a branch from the SHA where the original project was forked
# $ git branch my_cherry_picked_feature 251ea14
#
# Move to the branch
# $ git checkout my_cherry_picked_feature
#
# Cherry pick the commit I want to submit as a pull request
# $ git cherry-pick 4252331
#
# Push the branch and do the pull request from the head of the new branch
# $ git push origin my_cherry_picked_feature
#
